filter(across(c("DATEREMISEJ1", "DATERECJ1"
, "DATEREMISEJ2", "DATERECJ2"), ~!is.na(.x))
, across(c("DATEREMISESECJ1", "DATERECSECJ1"
, "DATEREMISESECJ2", "DATERECSECJ2"
, "DATEARRET"), is.na)) %>%
pull(id) %>% unique -> two_clean
met_captorobs %>%
filter(across(c("DATEREMISEJ1"), ~!is.na(.x))
, across(c("DATERECJ1"
, "DATEREMISESECJ1", "DATERECSECJ1"
, "DATEREMISEJ2", "DATERECJ2"
, "DATEREMISESECJ2", "DATERECSECJ2"
, "DATEARRET"), is.na)) %>%
pull(id) %>% unique -> one_entryonly
one_entryonly
met_captorobs %>%
filter(across(c("DATEREMISEJ1"
, "DATEARRET"), ~!is.na(.x))
, across(c("DATERECJ1"
, "DATEREMISESECJ1", "DATERECSECJ1"
, "DATEREMISEJ2", "DATERECJ2"
, "DATEREMISESECJ2", "DATERECSECJ2"
), is.na)) %>%
pull(id) %>% unique -> entry_arret
met_captorobs %>%
filter(across(c("DATEREMISEJ1", "DATERECJ1"
, "DATEREMISEJ2"
), ~!is.na(.x))
, across(c("DATEREMISESECJ1", "DATERECSECJ1"
, "DATERECJ2"
, "DATEREMISESECJ2", "DATERECSECJ2"
, "DATEARRET"
), is.na)) %>%
pull(id) %>% unique -> second_entryonly
met_captorobs %>%
filter(across(c("DATEREMISEJ1", "DATERECJ1"
, "DATEREMISESECJ1", "DATERECSECJ1"
), ~!is.na(.x))
, across(c("DATEREMISEJ2", "DATERECJ2"
, "DATEREMISESECJ2", "DATERECSECJ2"
, "DATEARRET"
), is.na)) %>%
pull(id) %>% unique -> second_issec
met_captorobs %>%
filter(across(c("DATEREMISEJ1"
, "DATEREMISEJ2", "DATERECJ2"
), ~!is.na(.x))
, across(c("DATERECJ1"
, "DATEREMISESECJ1", "DATERECSECJ1"
, "DATEREMISESECJ2", "DATERECSECJ2"
, "DATEARRET"
), is.na)) %>%
pull(id) %>% unique -> oneentry_two
met_captorobs %>%
filter(across(c("DATEREMISEJ1"
, "DATEREMISESECJ2", "DATERECSECJ2"
), ~!is.na(.x))
, across(c("DATERECJ1"
, "DATEREMISESECJ1", "DATERECSECJ1"
, "DATEREMISEJ2", "DATERECJ2"
, "DATEARRET"
), is.na)) %>%
pull(id) %>% unique -> oneentry_secondissec
met_captorobs %>%
filter(across(c("DATEREMISEJ1"
, "DATEREMISESECJ1", "DATERECSECJ1"
), ~!is.na(.x))
, across(c("DATERECJ1"
, "DATEREMISEJ2", "DATERECJ2"
, "DATEREMISESECJ2", "DATERECSECJ2"
, "DATEARRET"
), is.na)) %>%
pull(id) %>% unique -> oneentry_onesec
met_captorobs %>%
filter(across(c("DATEREMISEJ1", "DATERECJ1"
, "DATEREMISEJ2", "DATERECJ2"
, "DATEARRET"
), ~!is.na(.x))
, across(c("DATEREMISESECJ1", "DATERECSECJ1"
, "DATEREMISESECJ2", "DATERECSECJ2"
), is.na)) %>%
pull(id) %>% unique -> useless_arret
met_captorobs %>%
filter(across(c("DATEREMISEJ1", "DATERECJ1"
, "DATEREMISESECJ1", "DATERECSECJ1"
, "DATEREMISEJ2", "DATERECJ2"
), ~!is.na(.x))
, across(c("DATEARRET"
, "DATEREMISESECJ2", "DATERECSECJ2"
), is.na)) %>%
pull(id) %>% unique -> one_w_sec
met_captorobs %>%
filter(across(c("DATEREMISEJ1", "DATERECJ1"
, "DATEREMISEJ2", "DATERECJ2"
, "DATEREMISESECJ2", "DATERECSECJ2"
), ~!is.na(.x))
, across(c("DATEARRET"
, "DATEREMISESECJ1", "DATERECSECJ1"
), is.na)) %>%
pull(id) %>% unique -> two_w_sec
# left over no hopers
dregs = setdiff(met_captorobs$id, fct_c(one_clean, two_clean, one_entryonly, entry_arret, second_entryonly, second_issec, oneentry_two, oneentry_secondissec, oneentry_onesec, useless_arret, one_w_sec, two_w_sec))
dregs
# spanners
#only one staff member is there for both day shifts without the ins and outs being recorded (identified visually)
spanners = "005-0040-N-E"
# four are there for both day shifts but the first exit isn't recorded, so they are also treated as spanners
oneentry_two
# these spanners aren't clean, they don't work up till the end of the shift,
# so we'll split it at midnight
weird_spanners = c("006-0060-M-O"
, "013-0055-N-J"
, "013-0076-S-S")
weird_spanners
# these have return times which seem to be a day late
overshoot = c("018-0005-P-G","012-0045-C-A","008-0010-D-L", "018-0084-G-C")
overshoot
# bad arret (there are contacts after this arret occurred)
list_ward_shift_bidirection %>%
filter(id %in% entry_arret) %>%
left_join(met_captorobs) %>%
filter((date_posix_first < DATEREMISEJ1) | (END > DATEARRET)) %>%
pull(id) %>% unique -> bad_arret
list_ward_shift_bidirection %>%
left_join(bichtram_shiftrange %>% transmute(list_ward_name, midnight = ceiling_date(J1, unit = "day"))) %>%
group_by(id) %>%
summarise(lastContact_beforemidnight = max(endContact[endContact < midnight])
, firstContact_aftermidnight = min(startContact[startContact > midnight])) %>%
filter(id %in% weird_spanners)
# but with sensible edits
met_captorobs_edited <-  met_captorobs %>%
left_join(list_ward_shift_bidirection %>%
left_join(bichtram_shiftrange %>% transmute(list_ward_name, midnight = ceiling_date(J1, unit = "day"))) %>%
group_by(id) %>%
summarise(lastContact = max(endContact)
, lastContact_beforemidnight = max(endContact[endContact < midnight])
, firstContact_aftermidnight = min(startContact[startContact > midnight]))
) %>%
mutate(
DATERECJ1_temp = DATERECJ1
, DATERECJ1 = case_when(id %in% spanners ~ N1
, id %in% oneentry_two ~ N1
, id %in% one_entryonly ~ lastContact
, id %in% bad_arret ~ lastContact
, id %in% entry_arret ~ DATEARRET
, id %in% oneentry_secondissec ~ DATERECSECJ2
, id %in% oneentry_onesec ~ DATERECSECJ1
, id %in% one_w_sec ~ DATERECSECJ1
, id %in% overshoot ~ DATERECJ1 - days(1)
, id %in% dregs[2] ~ DATEARRET
, id %in% weird_spanners & !is.finite(lastContact_beforemidnight) ~ DATEREMISEJ1
, id %in% weird_spanners  ~ lastContact_beforemidnight
, T ~ DATERECJ1)
, DATEREMISEJ2 = case_when(id %in% spanners ~ J2
, id %in% second_issec ~ DATEREMISESECJ1
, id %in% weird_spanners  ~ firstContact_aftermidnight
, T ~ DATEREMISEJ2)
, DATERECJ2 = case_when(id %in% spanners ~ N2
, id %in% second_entryonly & Vectorize(isTRUE)(lastContact < DATEREMISEJ2) ~ DATEREMISEJ2 # this makes a zero length could have gone with N2 here
, id %in% second_entryonly  ~ lastContact
, id %in% dregs[1] ~ lastContact
, id %in% second_issec ~ DATERECSECJ1
, id %in% two_w_sec ~ DATERECSECJ2
, id %in% weird_spanners  ~ DATERECJ1_temp
, T ~ DATERECJ2)
, DATEARRET = case_when(id %in% entry_arret ~ as.POSIXct(NA)
, id %in% useless_arret ~ as.POSIXct(NA)
, id %in% dregs[2] ~ as.POSIXct(NA)
, T ~ DATEARRET)
, DATEREMISESECJ1 = case_when(id %in% second_issec ~ as.POSIXct(NA)
, id %in% oneentry_onesec ~ as.POSIXct(NA)
, id %in% one_w_sec ~ as.POSIXct(NA)
, id %in% dregs ~ as.POSIXct(NA)
, T ~ DATEREMISESECJ1)
, DATERECSECJ1 = case_when(id %in% second_issec ~ as.POSIXct(NA)
, id %in% oneentry_onesec ~ as.POSIXct(NA)
, id %in% one_w_sec ~ as.POSIXct(NA)
, id %in% dregs ~ as.POSIXct(NA)
, T ~ DATERECSECJ1)
, DATEREMISESECJ2 = case_when(id %in% oneentry_secondissec ~ as.POSIXct(NA)
, id %in% two_w_sec ~ as.POSIXct(NA)
, T ~ DATEREMISESECJ2)
, DATERECSECJ2 = case_when(id %in% oneentry_secondissec ~ as.POSIXct(NA)
, id %in% two_w_sec ~ as.POSIXct(NA)
, T ~ DATERECSECJ2)
) %>%
select(-lastContact, -lastContact_beforemidnight, -firstContact_aftermidnight
, -DATERECJ1_temp
, -DATEARRET, -contains("SECJ"))
met_captorobs_edited %>%
# filter(!(id %in% dregs)) %>%
select(starts_with("DATE")) %>%
rename_all(~gsub("^DATE", "", .x)) %>%
mutate_all(~ifelse(is.na(.x), 0, 1)) %>%
group_by_all() %>%
summarise(n = n()) %>%
arrange(-n)
w = list_ward_shift_bidirection %>%
# filter(!(id %in% fct_c(one_clean, two_clean))) %>%
filter((id %in% one_entryonly)) %>% filter(status != "PA") %>%
pull(list_ward_name) %>% unique %>% {.[10]}
list_ward_shift_bidirection %>%
mutate(id = factor(id, order_of_appearance)) %>%
# filter(!(id %in% fct_c(one_clean, two_clean, one_entryonly, entry_arret, second_entryonly, second_issec, oneentry_two, oneentry_secondissec, oneentry_onesec, useless_arret, one_w_sec, two_w_sec))) %>%
# filter(id %in% second_entryonly) %>%
# filter(id %in% highs) %>%
# filter(id %in% factor(longs, order_of_appearance)) %>%
# filter(id %in% whole_night) %>%
# filter(id %in% oneentry_two) %>%
filter(id %in% fct_c(factor(spanners), oneentry_two)) %>%
# filter(id %in% fct_c(one_entryonly)) %>%
# filter(id %in% "018-0084-G-C") %>%
# filter(list_ward_name == w) %>%
arrange(id) %>%
left_join(met_captorobs) %>%
# left_join(met_captorobs_edited) %>%
ggplot(aes(y = id, colour = status)) +
geom_errorbar(aes(xmin=as.POSIXct(date_posix_first), xmax=as.POSIXct(END)
# , alpha = bad_contacts
), width=.3, size = 1) +
geom_vline(aes(xintercept = J1, linetype = "J1")) +
geom_vline(aes(xintercept = N1, linetype = "N1")) +
geom_vline(aes(xintercept = J2, linetype = "J2")) +
geom_vline(aes(xintercept = N2, linetype = "N2")) +
theme_bw() + theme(axis.text.x = element_text(vjust = 0)
# , axis.text.y = element_blank()
, text = element_text(size = 10)) +
facet_wrap(.~list_ward_name, scales = "free") +
labs(title = w, x = "", y = "Individual", colour = "status") +
scale_colour_manual(values = c(PA = "red", PE = "blue", V = "green"
, J1 = "black", J1SEC = "purple", J2 = "grey", J2SEC = "orange", ARRET = "pink")) +
geom_point(aes(y = id, x = DATEREMISEJ1, shape = "OUT", colour = "J1")) +
geom_point(aes(y = id, x = DATERECJ1, shape = "IN", colour = "J1")) +
# geom_point(aes(y = id, x = DATEREMISESECJ1, shape = "OUT", colour = "J1SEC")) +
# geom_point(aes(y = id, x = DATERECSECJ1, shape = "IN", colour = "J1SEC")) +
geom_point(aes(y = id, x = DATEREMISEJ2, shape = "OUT", colour = "J2")) +
geom_point(aes(y = id, x = DATERECJ2, shape = "IN", colour = "J2")) #+
list_ward_shift_bidirection %>%
mutate(id = factor(id, order_of_appearance)) %>%
filter(id == "001-0036-R-R") %>%
# filter(!(id %in% fct_c(one_clean, two_clean, one_entryonly, entry_arret, second_entryonly, second_issec, oneentry_two, oneentry_secondissec, oneentry_onesec, useless_arret, one_w_sec, two_w_sec))) %>%
# filter(id %in% second_entryonly) %>%
# filter(id %in% highs) %>%
# filter(id %in% factor(longs, order_of_appearance)) %>%
# filter(id %in% whole_night) %>%
# filter(id %in% oneentry_two) %>%
# filter(id %in% fct_c(factor(spanners), oneentry_two)) %>%
# filter(id %in% fct_c(one_entryonly)) %>%
# filter(id %in% "018-0084-G-C") %>%
# filter(list_ward_name == w) %>%
arrange(id) %>%
left_join(met_captorobs) %>%
# left_join(met_captorobs_edited) %>%
ggplot(aes(y = id, colour = status)) +
geom_errorbar(aes(xmin=as.POSIXct(date_posix_first), xmax=as.POSIXct(END)
# , alpha = bad_contacts
), width=.3, size = 1) +
geom_vline(aes(xintercept = J1, linetype = "J1")) +
geom_vline(aes(xintercept = N1, linetype = "N1")) +
geom_vline(aes(xintercept = J2, linetype = "J2")) +
geom_vline(aes(xintercept = N2, linetype = "N2")) +
theme_bw() + theme(axis.text.x = element_text(vjust = 0)
# , axis.text.y = element_blank()
, text = element_text(size = 10)) +
facet_wrap(.~list_ward_name, scales = "free") +
labs(title = w, x = "", y = "Individual", colour = "status") +
scale_colour_manual(values = c(PA = "red", PE = "blue", V = "green"
, J1 = "black", J1SEC = "purple", J2 = "grey", J2SEC = "orange", ARRET = "pink")) +
geom_point(aes(y = id, x = DATEREMISEJ1, shape = "OUT", colour = "J1")) +
geom_point(aes(y = id, x = DATERECJ1, shape = "IN", colour = "J1")) +
# geom_point(aes(y = id, x = DATEREMISESECJ1, shape = "OUT", colour = "J1SEC")) +
# geom_point(aes(y = id, x = DATERECSECJ1, shape = "IN", colour = "J1SEC")) +
geom_point(aes(y = id, x = DATEREMISEJ2, shape = "OUT", colour = "J2")) +
geom_point(aes(y = id, x = DATERECJ2, shape = "IN", colour = "J2")) #+
# "014-0365-F-E" %in% one_clean
# met_captorobs %>%
#   filter(id == "014-0365-F-E")
#
met_captorobs_edited %>%
filter(id == "001-0036-R-R")
met
met %>%
filter(SUBJECT_REF == "001-0036-R-R")
met %>%
filter(SUBJECT_REF == "001-0036-R-R") %>%
View
met %>%
filter(SUBJECT_REF == "001-0036-R-R") %>%
names
met %>%
filter(SUBJECT_REF == "001-0036-R-R") %>%
select(hosp_inv, subj_data
, M1F1_DATEREMISEJ1, M5F2_DATERECJ1, M3F1_DATEREMISESECJ1, M5F2_DATERECSECJ1
, M3F1_DATEREMISEJ2, M5F2_DATERECJ2, M3F1_DATEREMISESECJ2, M5F2_DATERECSECJ2
, M5F1_DATEARRET
# , M5F1_DATENONOPPO, M5F1DAT_DATEDECES
)
met %>%
filter(SUBJECT_REF == "001-0036-R-R") %>%
select(hosp_inv, subj_data
, M1F1_DATEREMISEJ1, M5F2_DATERECJ1, M3F1_DATEREMISESECJ1, M5F2_DATERECSECJ1
, M3F1_DATEREMISEJ2, M5F2_DATERECJ2, M3F1_DATEREMISESECJ2, M5F2_DATERECSECJ2
, M5F1_DATEARRET
# , M5F1_DATENONOPPO, M5F1DAT_DATEDECES
) %>%
View
met_captorobs %>%
filter(across(c("DATEREMISEJ1", "DATERECJ1"
, "DATEREMISEJ2"
), ~!is.na(.x))
, across(c("DATEREMISESECJ1", "DATERECSECJ1"
, "DATERECJ2"
, "DATEREMISESECJ2", "DATERECSECJ2"
, "DATEARRET"
), is.na)) %>%
pull(id) %>% unique -> second_entryonly
second_entryonly
lastContact
met_captorobs %>%
left_join(list_ward_shift_bidirection %>%
left_join(bichtram_shiftrange %>% transmute(list_ward_name, midnight = ceiling_date(J1, unit = "day"))) %>%
group_by(id) %>%
summarise(lastContact = max(endContact)
, lastContact_beforemidnight = max(endContact[endContact < midnight])
, firstContact_aftermidnight = min(startContact[startContact > midnight]))
) %>%
filter(id == "001-0036-R-R")
met_captorobs %>%
left_join(list_ward_shift_bidirection %>%
left_join(bichtram_shiftrange %>% transmute(list_ward_name, midnight = ceiling_date(J1, unit = "day"))) %>%
group_by(id) %>%
summarise(lastContact = max(endContact)
, lastContact_beforemidnight = max(endContact[endContact < midnight])
, firstContact_aftermidnight = min(startContact[startContact > midnight]))
) %>%
filter(id == "001-0036-R-R") %>% View
list_ward_shift_bidirection %>%
left_join(bichtram_shiftrange %>% transmute(list_ward_name, midnight = ceiling_date(J1, unit = "day"))) %>%
group_by(id) %>%
summarise(lastContact = max(endContact)
, lastContact_beforemidnight = max(endContact[endContact < midnight])
, firstContact_aftermidnight = min(startContact[startContact > midnight])) %>%
filter(id == "001-0036-R-R") %>% View
list_ward <- read_csv("input/Private/list_ward_complete.csv")
###################
#### read data ####
###################
setwd("~/nodscov2_risksim/")
list_ward <- read_csv("input/Private/list_ward_complete.csv")
list_ward
admission <- read_csv("input/Private/id_function_complete.csv")
timespent_mins <- read_csv(file = "input/Private/met_timespent_mins_complete.csv")
timespent_mins
timespent_mins %>% filter("001-0036-R-R")
timespent_mins %>% filter(id == "001-0036-R-R")
list_ward
list_ward %>% filter(from == "001-0036-R-R" | to == "001-0036-R-R")
admission <- read_csv("input/Private/id_function_complete.csv")
admission
admission$catHosp %>% table
admission %>%
filter(catHosp == "investigation")
invs = admission %>%
filter(catHosp == "investigation") %>%
pull(id)
invs = admission %>%
filter(catHosp == "investigation") %>%
pull(id)
list_ward %>%
filter(!(from %in% invs), !(to %in% invs)) %>%
filter(from == "001-0036-R-R" | to == "001-0036-R-R")
list_ward %>%
# filter(!(from %in% invs), !(to %in% invs)) %>%
filter(from == "001-0036-R-R" | to == "001-0036-R-R")
load(list_ward.RData, verbose = T)
load("input/Private/list_ward.RData", verbose = T)
list_ward
list_ward %>%
rbindlist
list_ward %>%
rbindlist(use.names = T)
list_ward %>%
rbindlist(use.names = T) %>%
as_tibble %>%
filter(from == "001-0036-R-R")
list_ward %>%
rbindlist(use.names = T) %>%
as_tibble %>%
filter(from == "001-0036-R-R") %>%
arrange(date_posix_first)
list_ward %>%
rbindlist(use.names = T) %>%
as_tibble %>%
filter(from == "001-0036-R-R" | to == "001-0036-R-R") %>%
arrange(date_posix_first)
timespent_mins <- read_csv(file = "input/Private/met_timespent_mins_complete.csv")
timespent_mins %>% filter(id == "001-0036-R-R")
list_ward <- read_csv("input/Private/list_ward_complete.csv")
list_ward
timespent_mins %>%
filter(!(id %in% list_ward$from), !(id %in% list_ward$to))
timespent_mins %>%
filter(!((id %in% list_ward$from)|(id %in% list_ward$to)))
timespent_mins %>%
filter(((id %in% list_ward$from)|(id %in% list_ward$to)))
timespent_mins
library(tidyverse)
list_ward_complete <- read_csv("../nodscov2_risksim/input/Private/list_ward_complete.csv")
maylis_dups <- read_delim("../Maylis/duplicates_contacts.csv", delim = ";")
View(maylis_dups)
list_ward_complete %>%
filter(from == maylis_dups$from[1],
to == maylis_dups$to[1])
list_ward <- read_csv("input/Private/list_ward_complete.csv")
admission <- read_csv("input/Private/id_function_complete.csv")
cats <- admission$catHosp %>% unique %>% sort
cats <- c("patient", "visitor", cats[cats != "investigation"], "investigation") %>% unique
stats <- c("PA", "V", "PE")
color_man_nb = c(PA = "red", V = "black", PE = "blue", ALL = "grey")
admission_types = admission %>%
transmute(id, status, catHosp = factor(catHosp, cats))
# removes the investigator category, from list_ward and from admission
invest = unique(admission$id[which(admission$catHosp=="investigation")])
list_ward <- read_csv("input/Private/list_ward_complete.csv")
admission <- read_csv("input/Private/id_function_complete.csv")
timespent_mins <- read_csv(file = "input/Private/met_timespent_mins_complete.csv")
Label_tib <- read_csv("input/newID_order.csv")
timespent <- timespent_mins %>%
select(id, time_J1, time_N1, time_J2) %>%
pivot_longer(-id, names_prefix = "time_", names_to = "shift", values_to = "total_mins")
cats <- admission$catHosp %>% unique %>% sort
# order them
cats <- c("patient", "visitor", cats[cats != "investigation"], "investigation") %>% unique
stats <- c("PA", "V", "PE")
admission_types = admission %>%
transmute(id, status, catHosp = factor(catHosp, cats))
# function determining probability of infection per duration of contact
sig <- function(x, a) (1 - exp(-x* a))/(1 + exp(-x* a))
a = 0.1 #shape parameter
list_ward_thisthat_saveid <- list_ward %>%
left_join(admission_types %>% rename_all(function(x) paste0(x, "_from")), by = c("from" = "id_from")) %>%
left_join(admission_types %>% rename_all(function(x) paste0(x, "_to")), by = c("to" = "id_to")) %>%
filter(catHosp_from != "investigation", catHosp_to != "investigation") %>%
mutate(across(starts_with("status"), ~factor(.x, levels = stats))) %>%
mutate(combcatHosp_from = catHosp_from %>% {case_when(. == "patient" ~ "Patient"
, . == "visitor" ~ "Visitor"
, . == "nurse" ~ "Nurse"
, . == "physician" ~ "Physician"
, . == "aux nurse" ~ "Nurse"
, . == "administration" ~ "Other"
, . == "ext physician" ~ "Physician"
, . == "logistic" ~ "Other"
, . == "student nurse" ~ "Nurse"
, . == "reeducation staff" ~ "Other"
, . == "other" ~ "Other")}) %>%
mutate(combcatHosp_to = catHosp_to %>% {case_when(. == "patient" ~ "Patient"
, . == "visitor" ~ "Visitor"
, . == "nurse" ~ "Nurse"
, . == "physician" ~ "Physician"
, . == "aux nurse" ~ "Nurse"
, . == "administration" ~ "Other"
, . == "ext physician" ~ "Physician"
, . == "logistic" ~ "Other"
, . == "student nurse" ~ "Nurse"
, . == "reeducation staff" ~ "Other"
, . == "other" ~ "Other")}) %>%
group_by(newID, wardType, from, to, status_from, status_to, catHosp_from, catHosp_to, combcatHosp_from, combcatHosp_to) %>% #first, aggregate contacts which occurred between the same people on the same day
# filter(length > 60) %>% #AJMAL
summarise(dur_mins = sum(length)/60) %>%
mutate(id_from = from, id_to = to) %>%
# filter(dur_mins > 1) %>% #AJMAL
pivot_longer(cols = c("from", "to"), names_to = "direction", values_to = "id") %>% #then lengthen the table so that each contact counts for both parties
mutate(this_status = case_when(direction == "from" ~ status_from
, direction == "to" ~ status_to)
, that_status = case_when(direction == "from" ~ status_to
, direction == "to" ~ status_from)
, this_catHosp = case_when(direction == "from" ~ catHosp_from
, direction == "to" ~ catHosp_to)
, that_catHosp = case_when(direction == "from" ~ catHosp_to
, direction == "to" ~ catHosp_from)
, this_combcatHosp = case_when(direction == "from" ~ combcatHosp_from
, direction == "to" ~ combcatHosp_to)
, that_combcatHosp = case_when(direction == "from" ~ combcatHosp_to
, direction == "to" ~ combcatHosp_from)
, other_id = case_when(direction == "from" ~ id_to
, direction == "to" ~ id_from)) %>%
select(-id_from, -id_to)
list_ward_thisthat_saveid
list_ward_thisthat_saveid %>%
filter(id == maylis_dups$from[1],
other_id = maylis_dups$to[1])
list_ward_thisthat_saveid %>%
filter(id == maylis_dups$from[1],
other_id == maylis_dups$to[1])
list_ward_complete %>%
filter(from == maylis_dups$from[1],
to == maylis_dups$to[1])
list_ward_complete %>%
filter(((from == maylis_dups$from[1]) & (to == maylis_dups$to[1])) |
((to == maylis_dups$from[1]) & (from == maylis_dups$to[1])))
list_ward_complete %>%
filter(((from == maylis_dups$from[1]) & (to == maylis_dups$to[1])) |
((to == maylis_dups$from[1]) & (from == maylis_dups$to[1]))) %>%
pull(length) %>% sum
list_ward_thisthat_saveid %>%
filter(id == maylis_dups$from[1],
other_id == maylis_dups$to[1])
list_ward_thisthat_saveid %>%
filter(id == maylis_dups$from[1],
other_id == maylis_dups$to[1]) %>%
pull(dur_mins)
2950/60
